{"version":3,"sources":["components/Searchbar.jsx","components/VideoItem.jsx","components/VideoList.jsx","components/VideoDetail.jsx","App.js","serviceWorker.js","index.js"],"names":["Searchbar","props","oninputchange","e","setState","searchterm","target","value","change","state","className","class","this","onChange","type","Component","VideoItem","video","selectvid","style","cursor","onClick","src","snippet","thumbnails","default","url","alt","title","VideoList","videos","map","key","etag","VideoDetail","videoid","id","videoId","frameborder","description","apikey","App","searchvid","YTSearch","term","selectedvideo","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iXA+CeA,G,wBAvCX,WAAYC,GAAO,IAAD,8BACd,4CAAMA,KA2BVC,cAAgB,SAACC,GACjB,EAAKC,SAAS,CAAEC,WAAYF,EAAEG,OAAOC,QACrC,EAAKN,MAAMO,OAAO,EAAKC,MAAMJ,aA5BzB,EAAKI,MAAQ,CAAEJ,WAAa,IAFd,E,sEAQd,OACI,yBAAKK,UAAU,aAEX,yBAAKA,UAAU,WACf,uBAAGC,MAAM,kBAAT,WACA,kFAKA,yBAAKD,UAAU,YAEf,2BAAQH,MAAOK,KAAKH,MAAMJ,WAAYQ,SAAUD,KAAKV,cAAeY,KAAK,e,GAvBjEC,c,MCWTC,MAdf,YAAyC,IAArBC,EAAoB,EAApBA,MAAQC,EAAY,EAAZA,UACxB,OACI,yBAAKC,MAAO,CAACC,OAAQ,WAAYC,QAAU,WAAKH,EAAUD,IAAUP,UAAU,aAGtE,yBAAKY,IAAKL,EAAMM,QAAQC,WAAWC,QAAQC,IAAKC,IAAI,KACpD,4BAAKV,EAAMM,QAAQK,OACnB,+BCUDC,MAbf,SAAmB5B,GAEf,IAAM6B,EAAS7B,EAAM6B,OAAOC,KAAK,SAAAd,GAC7B,OAAO,kBAAC,EAAD,CAAWC,UAAWjB,EAAMiB,UAAWc,IAAKf,EAAMgB,KAAMhB,MAAOA,OAG1E,OACI,yBAAKP,UAAU,aACNoB,ICYFI,G,MAtBK,SAAC,GAAa,IAAZjB,EAAW,EAAXA,MAGlB,IAAIA,EACA,OAAO,2CAGX,IAAMkB,EAAUlB,EAAMmB,GAAGC,QACnBX,EAAG,wCAAoCS,GAG7C,OACI,yBAAKzB,UAAU,eAEX,4BAAQkB,MAAM,QAAQN,IAAKI,EAAKY,YAAY,MAC5C,2BAAIrB,EAAMM,QAAQK,OAClB,2BAAIX,EAAMM,QAAQgB,gBCZxBC,EAAS,0CAkCAC,EAhCf,YACE,WAAYxC,GAAQ,IAAD,8BACjB,4CAAMA,KAORyC,UAAY,SAACrC,GACXsC,IAAS,CAACX,IAAKQ,EAAQI,KAAKvC,IAAa,SAACyB,GAExC,EAAK1B,SAAS,CAAE0B,OAAQA,EAAQe,cAAef,EAAO,SATxD,EAAKrB,MAAQ,CAAEqB,OAAQ,GAAIe,cAAe,MAC1C,EAAKH,UAAU,UAHE,EADrB,sEAgBY,IAAD,OACP,OACE,yBAAKhC,UAAU,OACb,kBAAC,EAAD,CAAWF,OAAQI,KAAK8B,YACxB,kBAAC,EAAD,CACExB,UAAW,SAAA2B,GACT,EAAKzC,SAAS,CAAEyC,cAAeA,KAEjCf,OAAQlB,KAAKH,MAAMqB,SAErB,kBAAC,EAAD,CAAab,MAAOL,KAAKH,MAAMoC,qBA1BvC,GAAyB9B,aCEL+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.3ae1f90a.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport './Searchbar.css';\r\n\r\n\r\n\r\nclass Searchbar extends Component {\r\n\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = { searchterm : \"\"}\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"searchbar\">\r\n\r\n                <div className=\"logobox\">\r\n                <i class=\"material-icons\">live_tv</i>\r\n                <h1>یوتوب گرد</h1>\r\n\r\n                </div>\r\n                \r\n                \r\n                <div className='inputbox'>\r\n\r\n                <input  value={this.state.searchterm} onChange={this.oninputchange} type=\"text\"/>\r\n                </div>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n    oninputchange = (e) => {\r\n    this.setState({ searchterm: e.target.value});\r\n    this.props.change(this.state.searchterm)\r\n    };\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\nexport default Searchbar;","import React from 'react'\r\n\r\nfunction VideoItem({video , selectvid}) {\r\n    return (\r\n        <div style={{cursor: \"pointer\"}} onClick={ ()=>{selectvid(video)}}  className=\"videoitem\">\r\n            \r\n\r\n                <img src={video.snippet.thumbnails.default.url} alt=\"\"/>\r\n                <h4>{video.snippet.title}</h4>\r\n                <hr />\r\n\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default VideoItem\r\n","import React from 'react'\r\nimport './Videoliststyle.css'\r\nimport VideoItem from './VideoItem';\r\n\r\n\r\n\r\nfunction VideoList(props) {\r\n\r\n    const videos = props.videos.map( video => {\r\n        return <VideoItem selectvid={props.selectvid} key={video.etag} video={video}  />\r\n    });\r\n\r\n    return (\r\n        <div className=\"videolist\">\r\n                {videos}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default VideoList;\r\n","import React from 'react'\r\nimport './VideoDetailstyle.css'\r\n\r\n\r\nconst VideoDetail = ({video}) => {\r\n\r\n\r\n    if(!video) {\r\n        return <div>loading...</div>\r\n    }\r\n\r\n    const videoid = video.id.videoId;\r\n    const url = `https://www.youtube.com/embed/${videoid}`\r\n\r\n\r\n    return (\r\n        <div className='videodetail'>\r\n            \r\n            <iframe title='video' src={url} frameborder=\"0\"></iframe>\r\n            <p>{video.snippet.title}</p>\r\n            <p>{video.snippet.description}</p>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default VideoDetail;\r\n","import React, { Component } from \"react\";\nimport YTSearch from \"youtube-api-search\";\n\nimport \"./App.css\";\nimport Searchbar from \"./components/Searchbar\";\nimport VideoList from \"./components/VideoList\";\nimport VideoDetail from \"./components/VideoDetail\";\n\nconst apikey = \"AIzaSyBV3uxP34zrY_THp88NN4eiVhsCKZEsLTw\";\n\nexport class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { videos: [], selectedvideo: null };\n    this.searchvid('webdev')\n\n  }\n\n\n  searchvid = (searchterm) => {\n    YTSearch({key: apikey, term:searchterm}, (videos) => {\n\n      this.setState({ videos: videos, selectedvideo: videos[0] });\n    } )\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Searchbar change={this.searchvid} />\n        <VideoList\n          selectvid={selectedvideo => {\n            this.setState({ selectedvideo: selectedvideo });\n          }}\n          videos={this.state.videos}\n        />\n        <VideoDetail video={this.state.selectedvideo} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/fontiran.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}